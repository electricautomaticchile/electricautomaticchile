# üöÄ Script de Docker para Desarrollo Local - Electric Automatic Chile
# Configuraci√≥n simplificada para desarrollo local r√°pido y eficiente

param(
    [Parameter(Position=0)]
    [string]$Command = "help"
)

function Write-Info {
    param($Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Warn {
    param($Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

function Write-Error {
    param($Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

function Test-Docker {
    Write-Info "Verificando Docker..."
    
    if (!(Get-Command docker -ErrorAction SilentlyContinue)) {
        Write-Error "Docker no est√° instalado. Instala Docker Desktop: https://www.docker.com/products/docker-desktop/"
        exit 1
    }
    
    if (!(Get-Command docker-compose -ErrorAction SilentlyContinue)) {
        Write-Error "Docker Compose no est√° disponible."
        exit 1
    }
    
    Write-Info "Docker est√° listo"
}

function Start-Development {
    Write-Info "üöÄ Iniciando ambiente de desarrollo..."
    
    # Construir y levantar servicios
    docker-compose -f docker-compose.dev.yml up -d --build
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host ""
        Write-Host "üéâ Ambiente de desarrollo iniciado correctamente!" -ForegroundColor Green
        Write-Host ""
        Write-Host "üì± Tu aplicaci√≥n est√° disponible en:" -ForegroundColor Cyan
        Write-Host "   ‚Üí http://localhost:3000" -ForegroundColor White
        Write-Host ""
        Write-Host "üóÑÔ∏è  Servicios disponibles:" -ForegroundColor Cyan
        Write-Host "   ‚Üí MongoDB: localhost:27017" -ForegroundColor White
        Write-Host "   ‚Üí Redis: localhost:6379" -ForegroundColor White
        Write-Host "   ‚Üí MongoDB UI: http://localhost:8081 (admin/admin)" -ForegroundColor White
        Write-Host ""
        Write-Host "üí° Para ver logs: .\scripts\docker-setup.ps1 logs" -ForegroundColor Yellow
    } else {
        Write-Error "Error iniciando el ambiente de desarrollo"
        exit 1
    }
}

function Stop-Development {
    Write-Info "üõë Deteniendo ambiente de desarrollo..."
    docker-compose -f docker-compose.dev.yml down
    Write-Info "Ambiente detenido"
}

function Show-Logs {
    Write-Info "üìã Mostrando logs de la aplicaci√≥n..."
    docker-compose -f docker-compose.dev.yml logs -f app
}

function Show-Status {
    Write-Info "üìä Estado de los servicios:"
    docker-compose -f docker-compose.dev.yml ps
}

function Restart-Development {
    Write-Info "üîÑ Reiniciando ambiente de desarrollo..."
    Stop-Development
    Start-Sleep -Seconds 2
    Start-Development
}

function Open-App {
    Write-Info "üåê Abriendo aplicaci√≥n en el navegador..."
    Start-Process "http://localhost:3000"
}

function Clean-Everything {
    Write-Warn "üßπ Limpiando contenedores, vol√∫menes e im√°genes..."
    
    $confirm = Read-Host "¬øEst√°s seguro? Esto eliminar√° todos los datos (y/N)"
    if ($confirm -eq 'y' -or $confirm -eq 'Y') {
        docker-compose -f docker-compose.dev.yml down -v --remove-orphans
        docker system prune -f
        Write-Info "Limpieza completada"
    } else {
        Write-Info "Operaci√≥n cancelada"
    }
}

function Install-Dependencies {
    Write-Info "üì¶ Instalando dependencias en el contenedor..."
    docker-compose -f docker-compose.dev.yml exec app npm install
}

function Run-Tests {
    Write-Info "üß™ Ejecutando tests..."
    docker-compose -f docker-compose.dev.yml exec app npm test
}

# Funci√≥n principal
switch ($Command.ToLower()) {
    "start" {
        Test-Docker
        Start-Development
    }
    "stop" {
        Stop-Development
    }
    "restart" {
        Restart-Development
    }
    "logs" {
        Show-Logs
    }
    "status" {
        Show-Status
    }
    "open" {
        Open-App
    }
    "clean" {
        Clean-Everything
    }
    "install" {
        Install-Dependencies
    }
    "test" {
        Run-Tests
    }
    "help" {
        Write-Host "üöÄ Docker Setup para Desarrollo Local - Electric Automatic Chile" -ForegroundColor Cyan
        Write-Host ""
        Write-Host "Comandos disponibles:" -ForegroundColor White
        Write-Host "  start     - Iniciar ambiente de desarrollo" -ForegroundColor Green
        Write-Host "  stop      - Detener servicios" -ForegroundColor Red
        Write-Host "  restart   - Reiniciar servicios" -ForegroundColor Yellow
        Write-Host "  logs      - Ver logs de la aplicaci√≥n" -ForegroundColor Blue
        Write-Host "  status    - Estado de servicios" -ForegroundColor Magenta
        Write-Host "  open      - Abrir aplicaci√≥n en navegador" -ForegroundColor Cyan
        Write-Host "  install   - Instalar dependencias npm" -ForegroundColor White
        Write-Host "  test      - Ejecutar tests" -ForegroundColor White
        Write-Host "  clean     - Limpiar todo (‚ö†Ô∏è elimina datos)" -ForegroundColor DarkRed
        Write-Host ""
        Write-Host "Uso t√≠pico:" -ForegroundColor Yellow
        Write-Host "  .\scripts\docker-setup.ps1 start    # Primera vez" 
        Write-Host "  .\scripts\docker-setup.ps1 open     # Abrir en navegador"
        Write-Host "  .\scripts\docker-setup.ps1 logs     # Ver logs"
        Write-Host "  .\scripts\docker-setup.ps1 stop     # Al terminar"
    }
    default {
        Write-Error "Comando no reconocido: $Command"
        Write-Host "Usa '.\scripts\docker-setup.ps1 help' para ver comandos disponibles"
    }
} 